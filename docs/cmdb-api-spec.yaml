openapi: 3.0.1
info:
  title: CMDB API
  description: This is a simple movies API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:1010/

tags:
- name: Users
- name: Movies
- name: Groups

paths:
  /users:
    post:
      tags:
      - Users
      summary: Adds a user
      description: Adds a user to the system
      operationId: addUser
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: false
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                required:
                - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content: {}
      x-codegen-request-body-name: user
  /users/{userId}/groups: 
    post:
      tags:
      - Groups
      summary: Adds a group to a user
      description: Adds a group to the system
      operationId: addGroup
      requestBody:
        description: Group to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroupCreated'
        required: false
      responses:
        201:
          description: Group created
          content:
            application/json:
              schema:
                required:
                - id
                - description
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content: {}
      x-codegen-request-body-name: group
  /users/{userId}/groups/{groupId}:
    get:
      tags:
      - Groups
      summary: Get a group given the id 
      description: By passing in the appropriate options, you can search for one group
      operationId: getGroupId
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
          format: uuid
      - name: id
        in: query
        description: pass an optional search string for looking up movies with that segment
        schema:
          type: integer
          example: 1
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewGroup'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
    delete:
      tags:
      - Groups
      summary: Delete a group by ID
      description: Delete a group by ID
      operationId: deleteGroup
      security:
        - bearerAuth: []
      parameters:
      - name: groupkId
        in: path
        description: ID of the task to be deleted
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Task not found
          content: {}
    put:
      tags:
      - Groups
      summary: Updates a group by ID
      description: Updates a group in the system
      operationId: updateGroup
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: ID of the task to be updated
        required: true
        schema:
          type: integer
      requestBody:
        description: Information to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
        required: false
      responses:
        201:
          description: Group updated
          content: {}
        404:
          description: Group not found
          content: {}
  /topMovies:
    get:
      tags:
      - Movies
      summary: Gets top best movies
      description: By passing in the appropriate options, you can search for available Movies
      operationId: getMovies
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
          format: uuid
      - name: skip
        in: query
        description: number of movies to skip for pagination
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: maximum number of movies to return
        schema:
          maximum: 250
          minimum: 0
          type: integer
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
  /movies:
    get:
      tags:
      - Movies
      summary: Gets movies by a name or expression
      description: By passing in the appropriate options, you can search for available Movies
      operationId: getMovies
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
          format: uuid
      - name : expression
        in: query
        description: name that its use to search for movies
        schema:
          type: string
          example: sipder
      - name: skip
        in: query
        description: number of movies to skip for pagination
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: maximum number of movies to return
        schema:
          maximum: 250
          minimum: 0
          type: integer
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
  /movies/movie/{id}:
    get:
      tags:
      - Movies
      summary: Gets movies by a given id.
      description: By passing in the appropriate options, you can search for available Movies
      operationId: getMoviesById
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
          format: uuid
      - name : expression
        in: query
        description: name that its use to search for movies
        schema:
          type: integer
          example: tt2154008
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
  /groups:
    get: 
      tags:
      - Groups
      summary: Get all Groups
      description: By passing in the appropriate options, you can search for available Groups
      operationId: getAllGroups
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
          format: uuid
      - name: skip
        in: query
        description: number of Groups to skip for pagination
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: maximum number of movies to return
        schema:
          maximum: 250
          minimum: 0
          type: integer
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
  /groups/{groupId}/{movieId}:
    delete:
      tags:
      - Groups
      summary: Delete a movie by ID
      description: Delete a movie from a group given movieID
      operationId: deleteMovie
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of the group to be updated
        required: true
        schema:
          type: integer
      - name: movieId
        in: query
        description: ID of the movie to be added to the group
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Group not found
          content: {}
    put:
      tags:
      - Groups
      summary: add a movie to a group given the movieId
      description: Updates a group in the system
      operationId: updateGroup
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: ID of the group to be updated
        required: true
        schema:
          type: integer
      - name: movieId
        in: query
        description: ID of the movie to be added to the group
        required: true
        schema:
          type: string  
      requestBody:
        description: Movie to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
        required: false
      responses:
        201:
          description: Group updated
          content: {}
        404:
          description: Group not found
          content: {}
  /groups/newGroup:
    get: 
        tags:
        - Groups
        summary: Get new Group
        description: By passing in the appropriate options, you can search for available Groups
        operationId: getNewGroup
        security:
          - bearerAuth: []
        parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          description: number of Groups to skip for pagination
          schema:
            minimum: 0
            type: integer
        - name: limit
          in: query
          description: maximum number of movies to return
          schema:
            maximum: 250
            minimum: 0
            type: integer
        responses:
          200:
            description: search results matching criteria
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Movie'
          400:
            description: bad input parameter
            content: 
              application/json:
                schema:
                  $ref: '#/components/schemas/InvalidRequest'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
  schemas:
    Movie:
      required:
      - id
      - title
      - userId

      type: object
      properties:
        id:
          type: integer
        title:
          type: string
          example: Study HTTP
        userId:
          type: integer
    NewGroup:
      required:
      - id
      - title
      - description
      - userId

      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Group Title
        description:
          type: string
          example: Group description
        userId:
          type: integer
    NewUser:
      required:
      - userName
      type: object
      properties:
        userName:
          type: string
          example: joao
    InvalidRequest:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"
    NewGroupCreated:
      required:
      - status
      - group
      type: object
      properties:
        status:
          type: string
          example: Group with id 11 created with success
        group:
          $ref: '#/components/schemas/NewGroup'